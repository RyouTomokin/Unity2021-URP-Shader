#pragma kernel CSMain

struct Boid
{
    float3 velocity;
    float3 position;

    float3 integral;        //累计误差
    float3 previousError;   //上一个误差
};
RWStructuredBuffer<Boid> boids;

float deltaTime;
float targetForce;
float maxVelocity;
float maxAcceleration;
float3 targetPos;

float kP,kI,kD;

float rand(float2 co)
{
    return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

float3 rand(float3 pos)
{
    return  float3(
        rand(float2(pos.x, pos.y)),
        rand(float2(pos.y, pos.z)),
        rand(float2(pos.z, pos.x))
    ) * 2 - 1;
}

float3 normalizeSafe(float3 v)
{
    return length(v) > 0 ? normalize(v) : 0;
}

float3 ClampLen(float3 value, float maxValue)
{
    float len = length(value);
    len = min(maxValue, len);
    return normalizeSafe(value) * len;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Boid boid = boids[id.x];
    //TODO: 计算新的位置和速度
    float3 error = targetPos - boid.position;                           // 计算误差
    float3 proportional = kP * error;
    boid.integral += kI * error * deltaTime;                            // 更新积分项
    float3 derivative = kD * (error - boid.previousError) / deltaTime;  // 计算微分项
    float3 acceleration = proportional + boid.integral + derivative;    // PID计算总加速度
    boid.previousError = error;                                         // 更新 previousError
    
    acceleration = ClampLen(acceleration, maxAcceleration);
    acceleration += rand(boid.position);

    boid.velocity += acceleration * deltaTime;    
    boid.velocity = ClampLen(boid.velocity, maxVelocity);
    
    boid.position += boid.velocity * deltaTime;
    
    boids[id.x] = boid;
}
